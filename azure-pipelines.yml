# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- dev

pool:
  # name: 'Chris'
  # name: 'Windows (BENJAMIN)'
  name: 'Windows (Ab)'

variables:
- name: backendNodeVersion
  value: '22.x'
- name: backendDirectory
  value: 'backend'
- group: SummarizzVars

stages:
- stage: Test
  displayName: 'Run Tests'
  jobs:
  - job: BackendTests
    displayName: 'Backend Tests'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '$(backendNodeVersion)'
      displayName: 'Install Node.js $(backendNodeVersion)'

    - script: |
        cd $(backendDirectory)
        npm install
      displayName: 'Backend - npm install'

    - script: |
        cd $(backendDirectory)
        npm run lint
      displayName: 'Backend - Lint'
      continueOnError: true

    - script: |
        cd $(backendDirectory)
        npm run test:coverage
        echo $(System.DefaultWorkingDirectory)
        pwd
        ls -lah
      displayName: 'Backend - Run tests'

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: $(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml

- stage: Build
  displayName: 'Build Applications'
  dependsOn: Test
  jobs:
  - job: BuildBackend
    displayName: 'Build Backend'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '$(backendNodeVersion)'
      displayName: 'Install Node.js $(backendNodeVersion)'

    - script: |
        cd $(backendDirectory)
        npm install
      displayName: 'Backend - npm install'

    - powershell: |
        # Create .env file in the backend directory
        # Initialize an empty array to hold each line of the YAML content
        $yamlLines = @()

        # Add each key-value pair to the array, substituting environment variable values
        $yamlLines += "NODE_ENV=$(NODE_ENV)"
        $yamlLines += "PORT=$(PORT)"
        $yamlLines += "FIREBASE_API_KEY=$(FIREBASE_API_KEY)"
        $yamlLines += "FIREBASE_AUTH_DOMAIN=$(FIREBASE_AUTH_DOMAIN)"
        $yamlLines += "FIREBASE_PROJECT_ID=$(FIREBASE_PROJECT_ID)"
        $yamlLines += "FIREBASE_STORAGE_BUCKET=$(FIREBASE_STORAGE_BUCKET)"
        $yamlLines += "FIREBASE_MESSAGING_SENDER_ID=$(FIREBASE_MESSAGING_SENDER_ID)"
        $yamlLines += "FIREBASE_APP_ID=$(FIREBASE_APP_ID)"
        $yamlLines += "FIREBASE_MEASUREMENT_ID=$(FIREBASE_MEASUREMENT_ID)"
        $yamlLines += "FIREBASE_DATABASE_URL=$(FIREBASE_DATABASE_URL)"
        $yamlLines += "GOOGLE_CLIENT_ID=$(GOOGLE_CLIENT_ID)"
        $yamlLines += "GOOGLE_CLIENT_SECRET=$(GOOGLE_CLIENT_SECRET)"
        $yamlLines += "GITHUB_CLIENT_ID=$(GITHUB_CLIENT_ID)"
        $yamlLines += "GITHUB_CLIENT_SECRET=$(GITHUB_CLIENT_SECRET)"
        $yamlLines += "FRONTEND_URL=$(FRONTEND_URL)"
        $yamlLines += "BACKEND_URL=$(BACKEND_URL)"
        $yamlLines += "JWT_SECRET=$(JWT_SECRET)"
        $yamlLines += "ALGOLIA_APP_ID=$(ALGOLIA_APP_ID)"
        $yamlLines += "ALGOLIA_API_KEY=$(ALGOLIA_API_KEY)"
        $yamlLines += "ALGOLIA_INDEX_NAME=$(ALGOLIA_INDEX_NAME)"

        # Join the lines with newlines to create the final YAML string
        $envContent = $yamlLines -join [System.Environment]::NewLine

        Set-Content -Path "$(System.DefaultWorkingDirectory)/$(backendDirectory)/.env" -Value $envContent
        Write-Host "Created .env file in backend directory"
      displayName: 'Create Backend .env File'

    - script: |
        cd $(backendDirectory)
        npm run build
      displayName: 'Backend - Build'

    - powershell: |
        # Define source and destination directories for clarity
        $sourceDir = "$(System.DefaultWorkingDirectory)/$(backendDirectory)"
        $destDir = "$sourceDir/dist"

        Write-Host "Source Directory: $sourceDir"
        Write-Host "Destination Directory: $destDir"

        # Check if source web.config exists before copying
        $sourceWebConfig = Join-Path -Path $sourceDir -ChildPath "web.config"
        if (-not (Test-Path $sourceWebConfig)) {
            Write-Error "Source web.config not found at $sourceWebConfig"
            # Exit 1 # Optionally fail the build if web.config is missing
        } else {
            Write-Host "Found source web.config. Proceeding with copy operations..."
            # Copy required files
            Copy-Item -Path (Join-Path -Path $sourceDir -ChildPath ".env") -Destination (Join-Path -Path $destDir -ChildPath ".env") -Force
            Copy-Item -Path (Join-Path -Path $sourceDir -ChildPath "package.json") -Destination (Join-Path -Path $destDir -ChildPath "package.json") -Force
            Copy-Item -Path (Join-Path -Path $sourceDir -ChildPath "package-lock.json") -Destination (Join-Path -Path $destDir -ChildPath "package-lock.json") -Force
            Copy-Item -Path $sourceWebConfig -Destination (Join-Path -Path $destDir -ChildPath "web.config") -Force # <-- THIS IS THE KEY ADDITION/CHANGE

            Write-Host "Copied .env, package.json, package-lock.json, and web.config to $destDir"
        }
      displayName: 'Copy .env, package*, web.config to dist' # Updated display name

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(backendDirectory)/dist'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/backend.zip'
        replaceExistingArchive: true
      displayName: 'Archive backend files'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/backend.zip'
        ArtifactName: 'backend'
        publishLocation: 'Container'
      displayName: 'Publish backend artifact'
